/* tslint:disable */
/* eslint-disable */
/**
 * 🪜
 * 🪜项目的API
 *
 * The version of the OpenAPI document: 3.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 地址
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    City?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    Detail?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    District?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    Province?: string;
}
/**
 * 
 * @export
 * @interface D2ModelCreateRequest
 */
export interface D2ModelCreateRequest {
    /**
     * `binding:\"dive\"`
     * @type {Array<D2ModelCreateRequestItems>}
     * @memberof D2ModelCreateRequest
     */
    Items?: Array<D2ModelCreateRequestItems>;
}
/**
 * 
 * @export
 * @interface D2ModelCreateRequestItems
 */
export interface D2ModelCreateRequestItems {
    /**
     * 名称. 可以自动取文件名称, 但需要去掉扩展文件名 `binding:\"required\"`
     * @type {string}
     * @memberof D2ModelCreateRequestItems
     */
    Name?: string;
    /**
     * 上传到OSS的路径, 不要保留域名 `binding:\"required\"`
     * @type {string}
     * @memberof D2ModelCreateRequestItems
     */
    Path?: string;
    /**
     * 截面序列化后的字符串 `binding:\"required\"`
     * @type {string}
     * @memberof D2ModelCreateRequestItems
     */
    Payload?: string;
    /**
     * 预览图 `binding:\"required\"`
     * @type {string}
     * @memberof D2ModelCreateRequestItems
     */
    Preview?: string;
    /**
     * 标签 `binding:\"required\"`
     * @type {object}
     * @memberof D2ModelCreateRequestItems
     */
    Tags?: object;
}
/**
 * 
 * @export
 * @interface D2ModelDeleteRequest
 */
export interface D2ModelDeleteRequest {
    /**
     * `binding:\"min=1\"`
     * @type {Array<number>}
     * @memberof D2ModelDeleteRequest
     */
    Ids?: Array<number>;
}
/**
 * 
 * @export
 * @interface D2ModelQueryRequest
 */
export interface D2ModelQueryRequest {
    /**
     * 名称. 模糊查询 `binding:\"omitempty\"`
     * @type {string}
     * @memberof D2ModelQueryRequest
     */
    Name?: string;
    /**
     * 标签. `binding:\"omitempty\"`
     * @type {object}
     * @memberof D2ModelQueryRequest
     */
    Tags?: object;
}
/**
 * 
 * @export
 * @interface D2ModelUpdateRequest
 */
export interface D2ModelUpdateRequest {
    /**
     * 截面ID
     * @type {number}
     * @memberof D2ModelUpdateRequest
     */
    ID?: number;
    /**
     * 名称. 可以自动取文件名称, 但需要去掉扩展文件名
     * @type {string}
     * @memberof D2ModelUpdateRequest
     */
    Name?: string;
    /**
     * 标签
     * @type {object}
     * @memberof D2ModelUpdateRequest
     */
    Tags?: object;
}
/**
 * 
 * @export
 * @interface D3ModelCreateRequest
 */
export interface D3ModelCreateRequest {
    /**
     * `binding:\"min=1,dive\"`
     * @type {Array<D3ModelCreateRequestItems>}
     * @memberof D3ModelCreateRequest
     */
    Items?: Array<D3ModelCreateRequestItems>;
}
/**
 * 
 * @export
 * @interface D3ModelCreateRequestItems
 */
export interface D3ModelCreateRequestItems {
    /**
     * 名称 `binding:\"required\"`
     * @type {string}
     * @memberof D3ModelCreateRequestItems
     */
    Name?: string;
    /**
     * 模型文件上传到OSS后的路径 `binding:\"required\"`
     * @type {string}
     * @memberof D3ModelCreateRequestItems
     */
    Path?: string;
    /**
     * 标签 `binding:\"required\"`
     * @type {object}
     * @memberof D3ModelCreateRequestItems
     */
    Tags?: object;
    /**
     * 模型类型 `binding:\"required\"`
     * @type {string}
     * @memberof D3ModelCreateRequestItems
     */
    Type?: D3ModelCreateRequestItemsTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum D3ModelCreateRequestItemsTypeEnum {
    Small = 'column_small',
    Large = 'column_large'
}

/**
 * 
 * @export
 * @interface D3ModelDeleteRequest
 */
export interface D3ModelDeleteRequest {
    /**
     * `binding:\"min=1\"`
     * @type {Array<number>}
     * @memberof D3ModelDeleteRequest
     */
    Ids?: Array<number>;
}
/**
 * 
 * @export
 * @interface D3ModelQueryRequest
 */
export interface D3ModelQueryRequest {
    /**
     * 名称. 模糊查询 `binding:\"omitempty\"`
     * @type {string}
     * @memberof D3ModelQueryRequest
     */
    Name?: string;
    /**
     * 渲染状态 `binding:\"omitempty\"`
     * @type {Array<string>}
     * @memberof D3ModelQueryRequest
     */
    Status?: Array<D3ModelQueryRequestStatusEnum>;
    /**
     * 标签. `binding:\"omitempty\"`
     * @type {object}
     * @memberof D3ModelQueryRequest
     */
    Tags?: object;
    /**
     * 模型类型 `binding:\"omitempty\"`
     * @type {string}
     * @memberof D3ModelQueryRequest
     */
    Type?: D3ModelQueryRequestTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum D3ModelQueryRequestStatusEnum {
    Waiting = 'waiting',
    Success = 'success',
    Failed = 'failed',
    Created = 'created',
    Rendering = 'rendering',
    Cancel = 'cancel'
}
/**
    * @export
    * @enum {string}
    */
export enum D3ModelQueryRequestTypeEnum {
    Small = 'column_small',
    Large = 'column_large'
}

/**
 * 
 * @export
 * @interface D3ModelUpdateRequest
 */
export interface D3ModelUpdateRequest {
    /**
     * 模型ID
     * @type {number}
     * @memberof D3ModelUpdateRequest
     */
    ID?: number;
    /**
     * 名称. 可以自动取文件名称, 但需要去掉扩展文件名
     * @type {string}
     * @memberof D3ModelUpdateRequest
     */
    Name?: string;
    /**
     * 标签
     * @type {object}
     * @memberof D3ModelUpdateRequest
     */
    Tags?: object;
    /**
     * 模型类型
     * @type {string}
     * @memberof D3ModelUpdateRequest
     */
    Type?: D3ModelUpdateRequestTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum D3ModelUpdateRequestTypeEnum {
    Small = 'column_small',
    Large = 'column_large'
}

/**
 * 
 * @export
 * @interface Login
 */
export interface Login {
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    captcha?: string;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    login_type?: LoginLoginTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    phone?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LoginLoginTypeEnum {
    密码 = '密码',
    短信 = '短信'
}

/**
 * 
 * @export
 * @interface MaterialCreateRequest
 */
export interface MaterialCreateRequest {
    /**
     * `binding:\"dive\"`
     * @type {Array<MaterialCreateRequestItems>}
     * @memberof MaterialCreateRequest
     */
    Items?: Array<MaterialCreateRequestItems>;
}
/**
 * 
 * @export
 * @interface MaterialCreateRequestItems
 */
export interface MaterialCreateRequestItems {
    /**
     * 高 `binding:\"required\"`
     * @type {number}
     * @memberof MaterialCreateRequestItems
     */
    Height?: number;
    /**
     * 名称. 可以自动取文件名称, 但需要去掉扩展文件名 `binding:\"required\"`
     * @type {string}
     * @memberof MaterialCreateRequestItems
     */
    Name?: string;
    /**
     * 上传到OSS的路径, 不要保留域名 `binding:\"required\"`
     * @type {string}
     * @memberof MaterialCreateRequestItems
     */
    Path?: string;
    /**
     * 标签 `binding:\"required\"`
     * @type {object}
     * @memberof MaterialCreateRequestItems
     */
    Tags?: object;
    /**
     * 宽 `binding:\"required\"`
     * @type {number}
     * @memberof MaterialCreateRequestItems
     */
    Width?: number;
}
/**
 * 
 * @export
 * @interface MaterialDeleteRequest
 */
export interface MaterialDeleteRequest {
    /**
     * `binding:\"min=1\"`
     * @type {Array<number>}
     * @memberof MaterialDeleteRequest
     */
    Ids?: Array<number>;
}
/**
 * 
 * @export
 * @interface MaterialListByNameRequest
 */
export interface MaterialListByNameRequest {
    /**
     * 名称 `binding:\"min=1\"`
     * @type {Array<string>}
     * @memberof MaterialListByNameRequest
     */
    Names?: Array<string>;
}
/**
 * 
 * @export
 * @interface MaterialQueryRequest
 */
export interface MaterialQueryRequest {
    /**
     * 名称. 模糊查询 `binding:\"omitempty\"`
     * @type {string}
     * @memberof MaterialQueryRequest
     */
    Name?: string;
    /**
     * 标签. `binding:\"omitempty\"`
     * @type {object}
     * @memberof MaterialQueryRequest
     */
    Tags?: object;
}
/**
 * 
 * @export
 * @interface MaterialUpdateRequest
 */
export interface MaterialUpdateRequest {
    /**
     * 高
     * @type {number}
     * @memberof MaterialUpdateRequest
     */
    Height?: number;
    /**
     * 材质UD
     * @type {number}
     * @memberof MaterialUpdateRequest
     */
    ID?: number;
    /**
     * 名称. 可以自动取文件名称, 但需要去掉扩展文件名
     * @type {string}
     * @memberof MaterialUpdateRequest
     */
    Name?: string;
    /**
     * 标签
     * @type {object}
     * @memberof MaterialUpdateRequest
     */
    Tags?: object;
    /**
     * 宽
     * @type {number}
     * @memberof MaterialUpdateRequest
     */
    Width?: number;
}
/**
 * 
 * @export
 * @interface MemberCardCreateRequest
 */
export interface MemberCardCreateRequest {
    /**
     * 折扣 `binding:\"max=1\"`
     * @type {number}
     * @memberof MemberCardCreateRequest
     */
    Discount?: number;
    /**
     * 赠送金额 `binding:\"omitempty\"`
     * @type {number}
     * @memberof MemberCardCreateRequest
     */
    GiftAmount?: number;
    /**
     * 有效期
     * @type {number}
     * @memberof MemberCardCreateRequest
     */
    Interval?: number;
    /**
     * 名称
     * @type {string}
     * @memberof MemberCardCreateRequest
     */
    Name?: string;
    /**
     * 价格
     * @type {number}
     * @memberof MemberCardCreateRequest
     */
    Price?: number;
    /**
     * 有效期单位
     * @type {string}
     * @memberof MemberCardCreateRequest
     */
    Unit?: MemberCardCreateRequestUnitEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MemberCardCreateRequestUnitEnum {
    D = 'D',
    W = 'W',
    M = 'M',
    Y = 'Y'
}

/**
 * 
 * @export
 * @interface MemberCardDeleteRequest
 */
export interface MemberCardDeleteRequest {
    /**
     * 会员卡ID
     * @type {number}
     * @memberof MemberCardDeleteRequest
     */
    ID?: number;
}
/**
 * 
 * @export
 * @interface MemberCardQueryRequest
 */
export interface MemberCardQueryRequest {
    /**
     * `binding:\"omitempty\"`
     * @type {string}
     * @memberof MemberCardQueryRequest
     */
    SalesStatus?: MemberCardQueryRequestSalesStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MemberCardQueryRequestSalesStatusEnum {
    下架 = '下架',
    上架 = '上架'
}

/**
 * 
 * @export
 * @interface MemberCardUpdateRequest
 */
export interface MemberCardUpdateRequest {
    /**
     * 折扣 `binding:\"max=1\"`
     * @type {number}
     * @memberof MemberCardUpdateRequest
     */
    Discount?: number;
    /**
     * 赠送金额 `binding:\"omitempty\"`
     * @type {number}
     * @memberof MemberCardUpdateRequest
     */
    GiftAmount?: number;
    /**
     * 会员卡ID
     * @type {number}
     * @memberof MemberCardUpdateRequest
     */
    ID?: number;
    /**
     * 有效期
     * @type {number}
     * @memberof MemberCardUpdateRequest
     */
    Interval?: number;
    /**
     * 名称
     * @type {string}
     * @memberof MemberCardUpdateRequest
     */
    Name?: string;
    /**
     * 价格
     * @type {number}
     * @memberof MemberCardUpdateRequest
     */
    Price?: number;
    /**
     * 有效期单位
     * @type {string}
     * @memberof MemberCardUpdateRequest
     */
    Unit?: MemberCardUpdateRequestUnitEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MemberCardUpdateRequestUnitEnum {
    D = 'D',
    W = 'W',
    M = 'M',
    Y = 'Y'
}

/**
 * 
 * @export
 * @interface MemberCardUpdateSalesStatusRequest
 */
export interface MemberCardUpdateSalesStatusRequest {
    /**
     * 会员卡ID
     * @type {number}
     * @memberof MemberCardUpdateSalesStatusRequest
     */
    ID?: number;
    /**
     * 销售状态
     * @type {string}
     * @memberof MemberCardUpdateSalesStatusRequest
     */
    SalesStatus?: MemberCardUpdateSalesStatusRequestSalesStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MemberCardUpdateSalesStatusRequestSalesStatusEnum {
    下架 = '下架',
    上架 = '上架'
}

/**
 * 
 * @export
 * @interface MemberQueryRequest
 */
export interface MemberQueryRequest {
    /**
     * 结束时间. 指注册 `binding:\"omitempty\"`
     * @type {number}
     * @memberof MemberQueryRequest
     */
    EndTime?: number;
    /**
     * 昵称. 模糊查询 `binding:\"omitempty\"`
     * @type {string}
     * @memberof MemberQueryRequest
     */
    NickName?: string;
    /**
     * 电话. 模糊查询 `binding:\"omitempty\"`
     * @type {string}
     * @memberof MemberQueryRequest
     */
    Phone?: string;
    /**
     * 开始时间. 指注册 `binding:\"omitempty\"`
     * @type {number}
     * @memberof MemberQueryRequest
     */
    StartTime?: number;
}
/**
 * 
 * @export
 * @interface ModuleCreateRequest
 */
export interface ModuleCreateRequest {
    /**
     * 名称
     * @type {string}
     * @memberof ModuleCreateRequest
     */
    Name?: string;
}
/**
 * 
 * @export
 * @interface ModuleDeleteRequest
 */
export interface ModuleDeleteRequest {
    /**
     * 模块ID
     * @type {number}
     * @memberof ModuleDeleteRequest
     */
    ID?: number;
}
/**
 * 
 * @export
 * @interface ModuleTagsUpdateRequest
 */
export interface ModuleTagsUpdateRequest {
    /**
     * 添加 `binding:\"omitempty\"`
     * @type {Array<number>}
     * @memberof ModuleTagsUpdateRequest
     */
    Add?: Array<number>;
    /**
     * 删除 `binding:\"omitempty\"`
     * @type {Array<number>}
     * @memberof ModuleTagsUpdateRequest
     */
    Del?: Array<number>;
    /**
     * 模块ID
     * @type {number}
     * @memberof ModuleTagsUpdateRequest
     */
    ID?: number;
}
/**
 * 
 * @export
 * @interface ModuleUpdateRequest
 */
export interface ModuleUpdateRequest {
    /**
     * 模块ID
     * @type {number}
     * @memberof ModuleUpdateRequest
     */
    ID?: number;
    /**
     * 名称
     * @type {string}
     * @memberof ModuleUpdateRequest
     */
    Name?: string;
}
/**
 * 
 * @export
 * @interface OrderCreateRequest
 */
export interface OrderCreateRequest {
    /**
     * 充值金额. 仅当 type 是充值类型时有效 `binding:\"omitempty\"`
     * @type {number}
     * @memberof OrderCreateRequest
     */
    Amount?: number;
    /**
     * 套餐(会员)类型. 仅当 type 是会员类型时有效 `binding:\"omitempty\"`
     * @type {number}
     * @memberof OrderCreateRequest
     */
    MemberCardID?: number;
    /**
     * 交易类型
     * @type {string}
     * @memberof OrderCreateRequest
     */
    Type?: OrderCreateRequestTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderCreateRequestTypeEnum {
    会员 = '会员',
    充值 = '充值'
}

/**
 * 
 * @export
 * @interface OrderDeleteRequest
 */
export interface OrderDeleteRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof OrderDeleteRequest
     */
    Ids?: Array<number>;
}
/**
 * 
 * @export
 * @interface OrderListRequest
 */
export interface OrderListRequest {
    /**
     * 结束时间 `binding:\"omitempty\"`
     * @type {number}
     * @memberof OrderListRequest
     */
    EndTime?: number;
    /**
     * 开始时间 `binding:\"omitempty\"`
     * @type {number}
     * @memberof OrderListRequest
     */
    StartTime?: number;
    /**
     * 交易状态 `binding:\"omitempty\"`
     * @type {string}
     * @memberof OrderListRequest
     */
    Status?: OrderListRequestStatusEnum;
    /**
     * 交易类型 `binding:\"omitempty\"`
     * @type {string}
     * @memberof OrderListRequest
     */
    Type?: OrderListRequestTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderListRequestStatusEnum {
    待支付 = '待支付',
    交易成功 = '交易成功',
    交易失败 = '交易失败'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderListRequestTypeEnum {
    会员 = '会员',
    充值 = '充值'
}

/**
 * 
 * @export
 * @interface OrderQueryRequest
 */
export interface OrderQueryRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderQueryRequest
     */
    TradeNo?: string;
}
/**
 * 
 * @export
 * @interface OrderUpdateRequest
 */
export interface OrderUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof OrderUpdateRequest
     */
    ID?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderUpdateRequest
     */
    Remark?: string;
}
/**
 * 
 * @export
 * @interface ProjectQueryRequest
 */
export interface ProjectQueryRequest {
    /**
     * 方案创建时间, 区间的结束
     * @type {number}
     * @memberof ProjectQueryRequest
     */
    CreatedAtE?: number;
    /**
     * 方案创建时间, 区间的开始
     * @type {number}
     * @memberof ProjectQueryRequest
     */
    CreatedAtS?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectQueryRequest
     */
    Limit?: number;
    /**
     * 方案名称
     * @type {string}
     * @memberof ProjectQueryRequest
     */
    Name?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectQueryRequest
     */
    Offset?: number;
    /**
     * 用户电话. 模糊查询, 仅工厂端可用
     * @type {string}
     * @memberof ProjectQueryRequest
     */
    Phone?: string;
}
/**
 * 
 * @export
 * @interface QuoteMaterialCreateRequest
 */
export interface QuoteMaterialCreateRequest {
    /**
     * 材质
     * @type {string}
     * @memberof QuoteMaterialCreateRequest
     */
    Material?: string;
    /**
     * 型号
     * @type {string}
     * @memberof QuoteMaterialCreateRequest
     */
    Model?: string;
    /**
     * 规格
     * @type {string}
     * @memberof QuoteMaterialCreateRequest
     */
    Spec?: string;
    /**
     * 单价
     * @type {number}
     * @memberof QuoteMaterialCreateRequest
     */
    UnitPrice?: number;
}
/**
 * 
 * @export
 * @interface QuoteMaterialDeleteRequest
 */
export interface QuoteMaterialDeleteRequest {
    /**
     * 
     * @type {Array<QuoteMaterialDeleteRequestItems>}
     * @memberof QuoteMaterialDeleteRequest
     */
    Items?: Array<QuoteMaterialDeleteRequestItems>;
}
/**
 * 
 * @export
 * @interface QuoteMaterialDeleteRequestItems
 */
export interface QuoteMaterialDeleteRequestItems {
    /**
     * 
     * @type {string}
     * @memberof QuoteMaterialDeleteRequestItems
     */
    Material?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteMaterialDeleteRequestItems
     */
    Model?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteMaterialDeleteRequestItems
     */
    Spec?: string;
}
/**
 * 
 * @export
 * @interface QuoteMaterialUpdateRequest
 */
export interface QuoteMaterialUpdateRequest {
    /**
     * 材质
     * @type {string}
     * @memberof QuoteMaterialUpdateRequest
     */
    Material?: string;
    /**
     * 型号
     * @type {string}
     * @memberof QuoteMaterialUpdateRequest
     */
    Model?: string;
    /**
     * 新的材质
     * @type {string}
     * @memberof QuoteMaterialUpdateRequest
     */
    NewMaterial?: string;
    /**
     * 新的单价
     * @type {number}
     * @memberof QuoteMaterialUpdateRequest
     */
    NewUnitPrice?: number;
    /**
     * 规格
     * @type {string}
     * @memberof QuoteMaterialUpdateRequest
     */
    Spec?: string;
}
/**
 * 
 * @export
 * @interface QuoteModelCreateRequest
 */
export interface QuoteModelCreateRequest {
    /**
     * 型号
     * @type {string}
     * @memberof QuoteModelCreateRequest
     */
    Model?: string;
    /**
     * 计价类型
     * @type {string}
     * @memberof QuoteModelCreateRequest
     */
    Type?: QuoteModelCreateRequestTypeEnum;
    /**
     * 计价单位
     * @type {string}
     * @memberof QuoteModelCreateRequest
     */
    Unit?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum QuoteModelCreateRequestTypeEnum {
    小柱 = '小柱',
    弯子 = '弯子',
    顶方 = '顶方',
    踏板 = '踏板',
    整体 = '整体',
    配件 = '配件'
}

/**
 * 
 * @export
 * @interface QuoteModelDeleteRequest
 */
export interface QuoteModelDeleteRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof QuoteModelDeleteRequest
     */
    Models?: Array<string>;
}
/**
 * 
 * @export
 * @interface QuoteModelUpdateRequest
 */
export interface QuoteModelUpdateRequest {
    /**
     * 型号
     * @type {string}
     * @memberof QuoteModelUpdateRequest
     */
    Model?: string;
    /**
     * 新的型号
     * @type {string}
     * @memberof QuoteModelUpdateRequest
     */
    NewModel?: string;
    /**
     * 计价类型
     * @type {string}
     * @memberof QuoteModelUpdateRequest
     */
    Type?: QuoteModelUpdateRequestTypeEnum;
    /**
     * 计价单位
     * @type {string}
     * @memberof QuoteModelUpdateRequest
     */
    Unit?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum QuoteModelUpdateRequestTypeEnum {
    小柱 = '小柱',
    弯子 = '弯子',
    顶方 = '顶方',
    踏板 = '踏板',
    整体 = '整体',
    配件 = '配件'
}

/**
 * 
 * @export
 * @interface QuoteQueryRequest
 */
export interface QuoteQueryRequest {
    /**
     * 产品型号 `binding:\"omitempty\"`
     * @type {string}
     * @memberof QuoteQueryRequest
     */
    Model?: string;
    /**
     * 产品规格 `binding:\"omitempty\"`
     * @type {string}
     * @memberof QuoteQueryRequest
     */
    Spec?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteQueryRequest
     */
    Type?: QuoteQueryRequestTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum QuoteQueryRequestTypeEnum {
    小柱 = '小柱',
    弯子 = '弯子',
    顶方 = '顶方',
    踏板 = '踏板',
    整体 = '整体',
    配件 = '配件'
}

/**
 * 
 * @export
 * @interface QuoteSpecCreateRequest
 */
export interface QuoteSpecCreateRequest {
    /**
     * 型号
     * @type {string}
     * @memberof QuoteSpecCreateRequest
     */
    Model?: string;
    /**
     * 规格
     * @type {string}
     * @memberof QuoteSpecCreateRequest
     */
    Spec?: string;
}
/**
 * 
 * @export
 * @interface QuoteSpecDeleteRequest
 */
export interface QuoteSpecDeleteRequest {
    /**
     * 
     * @type {Array<QuoteSpecDeleteRequestItems>}
     * @memberof QuoteSpecDeleteRequest
     */
    Items?: Array<QuoteSpecDeleteRequestItems>;
}
/**
 * 
 * @export
 * @interface QuoteSpecDeleteRequestItems
 */
export interface QuoteSpecDeleteRequestItems {
    /**
     * 
     * @type {string}
     * @memberof QuoteSpecDeleteRequestItems
     */
    Model?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteSpecDeleteRequestItems
     */
    Spec?: string;
}
/**
 * 
 * @export
 * @interface QuoteSpecUpdateRequest
 */
export interface QuoteSpecUpdateRequest {
    /**
     * 型号
     * @type {string}
     * @memberof QuoteSpecUpdateRequest
     */
    Model?: string;
    /**
     * 新规格
     * @type {string}
     * @memberof QuoteSpecUpdateRequest
     */
    NewSpec?: string;
    /**
     * 旧规格
     * @type {string}
     * @memberof QuoteSpecUpdateRequest
     */
    Spec?: string;
}
/**
 * 
 * @export
 * @interface StairCreateRequest
 */
export interface StairCreateRequest {
    /**
     * 名称
     * @type {string}
     * @memberof StairCreateRequest
     */
    Name?: string;
    /**
     * 楼梯序列化后的字符串
     * @type {string}
     * @memberof StairCreateRequest
     */
    Payload?: string;
    /**
     * 预览图
     * @type {string}
     * @memberof StairCreateRequest
     */
    Preview?: string;
    /**
     * 标签
     * @type {object}
     * @memberof StairCreateRequest
     */
    Tags?: object;
}
/**
 * 
 * @export
 * @interface StairDeleteRequest
 */
export interface StairDeleteRequest {
    /**
     * `binding:\"min=1\"`
     * @type {Array<number>}
     * @memberof StairDeleteRequest
     */
    Ids?: Array<number>;
}
/**
 * 
 * @export
 * @interface StairDetailRequest
 */
export interface StairDetailRequest {
    /**
     * 楼梯ID
     * @type {number}
     * @memberof StairDetailRequest
     */
    ID?: number;
}
/**
 * 
 * @export
 * @interface StairQueryRequest
 */
export interface StairQueryRequest {
    /**
     * 名称. 模糊查询 `binding:\"omitempty\"`
     * @type {string}
     * @memberof StairQueryRequest
     */
    Name?: string;
    /**
     * 所有者 `binding:\"omitempty\"`
     * @type {number}
     * @memberof StairQueryRequest
     */
    Owner?: number;
    /**
     * 标签. `binding:\"omitempty\"`
     * @type {object}
     * @memberof StairQueryRequest
     */
    Tags?: object;
}
/**
 * 
 * @export
 * @interface StairUpdateRequest
 */
export interface StairUpdateRequest {
    /**
     * 楼梯ID
     * @type {number}
     * @memberof StairUpdateRequest
     */
    ID?: number;
    /**
     * 名称
     * @type {string}
     * @memberof StairUpdateRequest
     */
    Name?: string;
    /**
     * 楼梯序列化后的字符串
     * @type {string}
     * @memberof StairUpdateRequest
     */
    Payload?: string;
    /**
     * 预览图
     * @type {string}
     * @memberof StairUpdateRequest
     */
    Preview?: string;
    /**
     * 标签
     * @type {object}
     * @memberof StairUpdateRequest
     */
    Tags?: object;
}
/**
 * 
 * @export
 * @interface TagCreateRequest
 */
export interface TagCreateRequest {
    /**
     * 名称
     * @type {string}
     * @memberof TagCreateRequest
     */
    Name?: string;
}
/**
 * 
 * @export
 * @interface TagDeleteRequest
 */
export interface TagDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof TagDeleteRequest
     */
    ID?: number;
}
/**
 * 
 * @export
 * @interface TagItemCreateRequest
 */
export interface TagItemCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof TagItemCreateRequest
     */
    Name?: string;
    /**
     * 
     * @type {number}
     * @memberof TagItemCreateRequest
     */
    TagID?: number;
}
/**
 * 
 * @export
 * @interface TagItemDeleteRequest
 */
export interface TagItemDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof TagItemDeleteRequest
     */
    ID?: number;
}
/**
 * 
 * @export
 * @interface TagItemDragSortRequest
 */
export interface TagItemDragSortRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof TagItemDragSortRequest
     */
    Sorted?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof TagItemDragSortRequest
     */
    TagID?: number;
}
/**
 * 
 * @export
 * @interface TagItemUpdateRequest
 */
export interface TagItemUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof TagItemUpdateRequest
     */
    ID?: number;
    /**
     * 
     * @type {string}
     * @memberof TagItemUpdateRequest
     */
    Name?: string;
}
/**
 * 
 * @export
 * @interface TagUpdateRequest
 */
export interface TagUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof TagUpdateRequest
     */
    ID?: number;
    /**
     * 
     * @type {string}
     * @memberof TagUpdateRequest
     */
    Name?: string;
}
/**
 * 
 * @export
 * @interface UserRegisterRequest
 */
export interface UserRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRegisterRequest
     */
    Captcha?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterRequest
     */
    Password?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterRequest
     */
    Phone?: string;
}
/**
 * 
 * @export
 * @interface UserResetPasswordRequest
 */
export interface UserResetPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof UserResetPasswordRequest
     */
    Captcha?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResetPasswordRequest
     */
    Password?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResetPasswordRequest
     */
    Phone?: string;
}
/**
 * 
 * @export
 * @interface UserSendCaptchaRequest
 */
export interface UserSendCaptchaRequest {
    /**
     * 
     * @type {string}
     * @memberof UserSendCaptchaRequest
     */
    Phone?: string;
}
/**
 * 
 * @export
 * @interface UserUpdateProfileRequest
 */
export interface UserUpdateProfileRequest {
    /**
     * 
     * @type {Address}
     * @memberof UserUpdateProfileRequest
     */
    Address?: Address;
    /**
     * 头像 `binding:\"omitempty\"`
     * @type {string}
     * @memberof UserUpdateProfileRequest
     */
    Avatar?: string;
    /**
     * 昵称 `binding:\"omitempty\"`
     * @type {string}
     * @memberof UserUpdateProfileRequest
     */
    NickName?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 批量添加截面
         * @summary 批量添加截面
         * @param {D2ModelCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d2ModelCreate: async (body?: D2ModelCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/d2_model/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除截面
         * @summary 删除截面
         * @param {D2ModelDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d2ModelDelete: async (body?: D2ModelDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/d2_model/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询截面
         * @summary 查询截面
         * @param {D2ModelQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d2ModelQuery: async (body?: D2ModelQueryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/d2_model/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新截面
         * @summary 更新截面
         * @param {D2ModelUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d2ModelUpdate: async (body?: D2ModelUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/d2_model/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 批量添加3D模型
         * @summary 批量添加3D模型
         * @param {D3ModelCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d3ModelCreate: async (body?: D3ModelCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/d3_model/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除3D模型
         * @summary 删除3D模型
         * @param {D3ModelDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d3ModelDelete: async (body?: D3ModelDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/d3_model/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询3D模型
         * @summary 查询3D模型
         * @param {D3ModelQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d3ModelQuery: async (body?: D3ModelQueryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/d3_model/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新3D模型
         * @summary 更新3D模型
         * @param {D3ModelUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d3ModelUpdate: async (body?: D3ModelUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/d3_model/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 批量添加材质
         * @summary 批量添加材质
         * @param {MaterialCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialCreate: async (body?: MaterialCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/material/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除材质
         * @summary 删除材质
         * @param {MaterialDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialDelete: async (body?: MaterialDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/material/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据名称列表查询材质
         * @summary 根据名称列表查询材质
         * @param {MaterialListByNameRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialListByName: async (body?: MaterialListByNameRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/material/list_by_name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询材质
         * @summary 查询材质
         * @param {MaterialQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialQuery: async (body?: MaterialQueryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/material/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新材质
         * @summary 更新材质
         * @param {MaterialUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialUpdate: async (body?: MaterialUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/material/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新建会员卡
         * @summary 新建会员卡
         * @param {MemberCardCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberCardCreate: async (body?: MemberCardCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/member_card/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除会员卡
         * @summary 删除会员卡
         * @param {MemberCardDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberCardDelete: async (body?: MemberCardDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/member_card/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询会员卡信息
         * @summary 查询会员卡信息
         * @param {MemberCardQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberCardQuery: async (body?: MemberCardQueryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/member_card/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新会员卡
         * @summary 更新会员卡
         * @param {MemberCardUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberCardUpdate: async (body?: MemberCardUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/member_card/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新会员卡销售状态
         * @summary 更新会员卡销售状态
         * @param {MemberCardUpdateSalesStatusRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberCardUpdateSalesStatus: async (body?: MemberCardUpdateSalesStatusRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/member_card/update_sales_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 会员查询
         * @summary 会员查询
         * @param {MemberQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberQuery: async (body?: MemberQueryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/member/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新建模块
         * @summary 新建模块
         * @param {ModuleCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleCreate: async (body?: ModuleCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/module/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除模块
         * @summary 删除模块
         * @param {ModuleDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleDelete: async (body?: ModuleDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/module/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询模块
         * @summary 查询模块
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleQuery: async (body?: object, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/module/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新模块的标签
         * @summary 更新模块的标签
         * @param {ModuleTagsUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleTagsUpdate: async (body?: ModuleTagsUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/module/tags/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新模块
         * @summary 更新模块
         * @param {ModuleUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleUpdate: async (body?: ModuleUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/module/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新建订单
         * @summary 新建订单
         * @param {OrderCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCreate: async (body?: OrderCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/order/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除订单
         * @summary 删除订单
         * @param {OrderDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderDelete: async (body?: OrderDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/order/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 订单列表
         * @summary 订单列表
         * @param {OrderListRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderList: async (body?: OrderListRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/order/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询单个订单. `用于支付后查询订单状态`
         * @summary 查询单个订单. `用于支付后查询订单状态`
         * @param {OrderQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderQuery: async (body?: OrderQueryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/order/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新订单, `当前仅支持管理员添加备注`
         * @summary 更新订单, `当前仅支持管理员添加备注`
         * @param {OrderUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderUpdate: async (body?: OrderUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/order/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 方案查询
         * @summary 方案查询
         * @param {ProjectQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectQuery: async (body?: ProjectQueryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/project/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新增产品材质报价
         * @summary 新增产品材质报价
         * @param {QuoteMaterialCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteMaterialCreate: async (body?: QuoteMaterialCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/quote/material_create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除产品材质报价
         * @summary 删除产品材质报价
         * @param {QuoteMaterialDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteMaterialDelete: async (body?: QuoteMaterialDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/quote/material_delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 修改产品材质报价
         * @summary 修改产品材质报价
         * @param {QuoteMaterialUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteMaterialUpdate: async (body?: QuoteMaterialUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/quote/material_update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新增产品型号
         * @summary 新增产品型号
         * @param {QuoteModelCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteModelCreate: async (body?: QuoteModelCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/quote/model_create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除产品型号
         * @summary 删除产品型号
         * @param {QuoteModelDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteModelDelete: async (body?: QuoteModelDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/quote/model_delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 修改产品型号
         * @summary 修改产品型号
         * @param {QuoteModelUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteModelUpdate: async (body?: QuoteModelUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/quote/model_update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 报价查询
         * @summary 报价查询
         * @param {QuoteQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteQuery: async (body?: QuoteQueryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/quote/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新增产品规格
         * @summary 新增产品规格
         * @param {QuoteSpecCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteSpecCreate: async (body?: QuoteSpecCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/quote/spec_create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除产品规格
         * @summary 删除产品规格
         * @param {QuoteSpecDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteSpecDelete: async (body?: QuoteSpecDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/quote/spec_delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 修改产品规格
         * @summary 修改产品规格
         * @param {QuoteSpecUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteSpecUpdate: async (body?: QuoteSpecUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/quote/spec_update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新建楼梯
         * @summary 新建楼梯
         * @param {StairCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stairCreate: async (body?: StairCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/stair/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除楼梯
         * @summary 删除楼梯
         * @param {StairDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stairDelete: async (body?: StairDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/stair/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 楼梯详情
         * @summary 楼梯详情
         * @param {StairDetailRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stairDetail: async (body?: StairDetailRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/stair/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询楼梯
         * @summary 查询楼梯
         * @param {StairQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stairQuery: async (body?: StairQueryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/stair/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新楼梯
         * @summary 更新楼梯
         * @param {StairUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stairUpdate: async (body?: StairUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/stair/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新建标签
         * @summary 新建标签
         * @param {TagCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagCreate: async (body?: TagCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tag/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除标签
         * @summary 删除标签
         * @param {TagDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagDelete: async (body?: TagDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tag/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 标签项-添加
         * @summary 标签项-添加
         * @param {TagItemCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagItemCreate: async (body?: TagItemCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tag/item/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 标签项-删除
         * @summary 标签项-删除
         * @param {TagItemDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagItemDelete: async (body?: TagItemDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tag/item/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ! `使用了 PostgreSQL 专有的语法, 不支持测试环境` tag_id: 标签ID sorted: 排好序的标签项ID数组, 如 [1326156906414215168, 1326179034668732416, 1326178972534312960]
         * @summary 标签项-拖拽排序
         * @param {TagItemDragSortRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagItemDragSort: async (body?: TagItemDragSortRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tag/item/drag_sort`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 标签项-编辑
         * @summary 标签项-编辑
         * @param {TagItemUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagItemUpdate: async (body?: TagItemUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tag/item/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询标签
         * @summary 查询标签
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagQuery: async (body?: object, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tag/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新标签
         * @summary 更新标签
         * @param {TagUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagUpdate: async (body?: TagUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tag/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 跳转到设计工具自动登录需要的信息
         * @summary 跳转到设计工具自动登录需要的信息
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDesignToken: async (body?: object, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/design_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 登录
         * @summary 登录
         * @param {Login} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin: async (body?: Login, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 退出登录
         * @summary 退出登录
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout: async (body?: object, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 刷新Token
         * @summary 刷新Token
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRefreshToken: async (body?: object, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/refresh_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 注册
         * @summary 注册
         * @param {UserRegisterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegister: async (body?: UserRegisterRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 重置密码
         * @summary 重置密码
         * @param {UserResetPasswordRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userResetPassword: async (body?: UserResetPasswordRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/reset_password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 发送验证码
         * @summary 发送验证码
         * @param {UserSendCaptchaRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSendCaptcha: async (body?: UserSendCaptchaRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/send_sms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新用户信息
         * @summary 更新用户信息
         * @param {UserUpdateProfileRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdateProfile: async (body?: UserUpdateProfileRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/update_profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 经销商的上传路径为 `/user/${uid}/_*` 管理员的上传路径为 `/static/_*` 和 `/user/${uid}/_*`
         * @summary 获取用于前端直传获取服务端签名或临时密钥
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUploadCredential: async (body?: object, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/upload_credential`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 批量添加截面
         * @summary 批量添加截面
         * @param {D2ModelCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async d2ModelCreate(body?: D2ModelCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.d2ModelCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除截面
         * @summary 删除截面
         * @param {D2ModelDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async d2ModelDelete(body?: D2ModelDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.d2ModelDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查询截面
         * @summary 查询截面
         * @param {D2ModelQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async d2ModelQuery(body?: D2ModelQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.d2ModelQuery(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新截面
         * @summary 更新截面
         * @param {D2ModelUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async d2ModelUpdate(body?: D2ModelUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.d2ModelUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 批量添加3D模型
         * @summary 批量添加3D模型
         * @param {D3ModelCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async d3ModelCreate(body?: D3ModelCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.d3ModelCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除3D模型
         * @summary 删除3D模型
         * @param {D3ModelDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async d3ModelDelete(body?: D3ModelDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.d3ModelDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查询3D模型
         * @summary 查询3D模型
         * @param {D3ModelQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async d3ModelQuery(body?: D3ModelQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.d3ModelQuery(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新3D模型
         * @summary 更新3D模型
         * @param {D3ModelUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async d3ModelUpdate(body?: D3ModelUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.d3ModelUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 批量添加材质
         * @summary 批量添加材质
         * @param {MaterialCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materialCreate(body?: MaterialCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materialCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除材质
         * @summary 删除材质
         * @param {MaterialDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materialDelete(body?: MaterialDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materialDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据名称列表查询材质
         * @summary 根据名称列表查询材质
         * @param {MaterialListByNameRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materialListByName(body?: MaterialListByNameRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materialListByName(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查询材质
         * @summary 查询材质
         * @param {MaterialQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materialQuery(body?: MaterialQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materialQuery(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新材质
         * @summary 更新材质
         * @param {MaterialUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materialUpdate(body?: MaterialUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materialUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 新建会员卡
         * @summary 新建会员卡
         * @param {MemberCardCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memberCardCreate(body?: MemberCardCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memberCardCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除会员卡
         * @summary 删除会员卡
         * @param {MemberCardDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memberCardDelete(body?: MemberCardDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memberCardDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查询会员卡信息
         * @summary 查询会员卡信息
         * @param {MemberCardQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memberCardQuery(body?: MemberCardQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memberCardQuery(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新会员卡
         * @summary 更新会员卡
         * @param {MemberCardUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memberCardUpdate(body?: MemberCardUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memberCardUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新会员卡销售状态
         * @summary 更新会员卡销售状态
         * @param {MemberCardUpdateSalesStatusRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memberCardUpdateSalesStatus(body?: MemberCardUpdateSalesStatusRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memberCardUpdateSalesStatus(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 会员查询
         * @summary 会员查询
         * @param {MemberQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memberQuery(body?: MemberQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memberQuery(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 新建模块
         * @summary 新建模块
         * @param {ModuleCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moduleCreate(body?: ModuleCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moduleCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除模块
         * @summary 删除模块
         * @param {ModuleDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moduleDelete(body?: ModuleDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moduleDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查询模块
         * @summary 查询模块
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moduleQuery(body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moduleQuery(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新模块的标签
         * @summary 更新模块的标签
         * @param {ModuleTagsUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moduleTagsUpdate(body?: ModuleTagsUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moduleTagsUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新模块
         * @summary 更新模块
         * @param {ModuleUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moduleUpdate(body?: ModuleUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moduleUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 新建订单
         * @summary 新建订单
         * @param {OrderCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderCreate(body?: OrderCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除订单
         * @summary 删除订单
         * @param {OrderDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderDelete(body?: OrderDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 订单列表
         * @summary 订单列表
         * @param {OrderListRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderList(body?: OrderListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderList(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查询单个订单. `用于支付后查询订单状态`
         * @summary 查询单个订单. `用于支付后查询订单状态`
         * @param {OrderQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderQuery(body?: OrderQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderQuery(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新订单, `当前仅支持管理员添加备注`
         * @summary 更新订单, `当前仅支持管理员添加备注`
         * @param {OrderUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderUpdate(body?: OrderUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 方案查询
         * @summary 方案查询
         * @param {ProjectQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectQuery(body?: ProjectQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectQuery(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 新增产品材质报价
         * @summary 新增产品材质报价
         * @param {QuoteMaterialCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteMaterialCreate(body?: QuoteMaterialCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteMaterialCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除产品材质报价
         * @summary 删除产品材质报价
         * @param {QuoteMaterialDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteMaterialDelete(body?: QuoteMaterialDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteMaterialDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 修改产品材质报价
         * @summary 修改产品材质报价
         * @param {QuoteMaterialUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteMaterialUpdate(body?: QuoteMaterialUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteMaterialUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 新增产品型号
         * @summary 新增产品型号
         * @param {QuoteModelCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteModelCreate(body?: QuoteModelCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteModelCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除产品型号
         * @summary 删除产品型号
         * @param {QuoteModelDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteModelDelete(body?: QuoteModelDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteModelDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 修改产品型号
         * @summary 修改产品型号
         * @param {QuoteModelUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteModelUpdate(body?: QuoteModelUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteModelUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 报价查询
         * @summary 报价查询
         * @param {QuoteQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteQuery(body?: QuoteQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteQuery(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 新增产品规格
         * @summary 新增产品规格
         * @param {QuoteSpecCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteSpecCreate(body?: QuoteSpecCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteSpecCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除产品规格
         * @summary 删除产品规格
         * @param {QuoteSpecDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteSpecDelete(body?: QuoteSpecDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteSpecDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 修改产品规格
         * @summary 修改产品规格
         * @param {QuoteSpecUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteSpecUpdate(body?: QuoteSpecUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteSpecUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 新建楼梯
         * @summary 新建楼梯
         * @param {StairCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stairCreate(body?: StairCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stairCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除楼梯
         * @summary 删除楼梯
         * @param {StairDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stairDelete(body?: StairDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stairDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 楼梯详情
         * @summary 楼梯详情
         * @param {StairDetailRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stairDetail(body?: StairDetailRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stairDetail(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查询楼梯
         * @summary 查询楼梯
         * @param {StairQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stairQuery(body?: StairQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stairQuery(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新楼梯
         * @summary 更新楼梯
         * @param {StairUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stairUpdate(body?: StairUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stairUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 新建标签
         * @summary 新建标签
         * @param {TagCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagCreate(body?: TagCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除标签
         * @summary 删除标签
         * @param {TagDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagDelete(body?: TagDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 标签项-添加
         * @summary 标签项-添加
         * @param {TagItemCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagItemCreate(body?: TagItemCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagItemCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 标签项-删除
         * @summary 标签项-删除
         * @param {TagItemDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagItemDelete(body?: TagItemDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagItemDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ! `使用了 PostgreSQL 专有的语法, 不支持测试环境` tag_id: 标签ID sorted: 排好序的标签项ID数组, 如 [1326156906414215168, 1326179034668732416, 1326178972534312960]
         * @summary 标签项-拖拽排序
         * @param {TagItemDragSortRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagItemDragSort(body?: TagItemDragSortRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagItemDragSort(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 标签项-编辑
         * @summary 标签项-编辑
         * @param {TagItemUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagItemUpdate(body?: TagItemUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagItemUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查询标签
         * @summary 查询标签
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagQuery(body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagQuery(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新标签
         * @summary 更新标签
         * @param {TagUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagUpdate(body?: TagUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagUpdate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 跳转到设计工具自动登录需要的信息
         * @summary 跳转到设计工具自动登录需要的信息
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userDesignToken(body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userDesignToken(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 登录
         * @summary 登录
         * @param {Login} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogin(body?: Login, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogin(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 退出登录
         * @summary 退出登录
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogout(body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogout(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 刷新Token
         * @summary 刷新Token
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRefreshToken(body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRefreshToken(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 注册
         * @summary 注册
         * @param {UserRegisterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRegister(body?: UserRegisterRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRegister(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 重置密码
         * @summary 重置密码
         * @param {UserResetPasswordRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userResetPassword(body?: UserResetPasswordRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userResetPassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 发送验证码
         * @summary 发送验证码
         * @param {UserSendCaptchaRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSendCaptcha(body?: UserSendCaptchaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userSendCaptcha(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新用户信息
         * @summary 更新用户信息
         * @param {UserUpdateProfileRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUpdateProfile(body?: UserUpdateProfileRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUpdateProfile(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 经销商的上传路径为 `/user/${uid}/_*` 管理员的上传路径为 `/static/_*` 和 `/user/${uid}/_*`
         * @summary 获取用于前端直传获取服务端签名或临时密钥
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUploadCredential(body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUploadCredential(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 批量添加截面
         * @summary 批量添加截面
         * @param {D2ModelCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d2ModelCreate(body?: D2ModelCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.d2ModelCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除截面
         * @summary 删除截面
         * @param {D2ModelDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d2ModelDelete(body?: D2ModelDeleteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.d2ModelDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询截面
         * @summary 查询截面
         * @param {D2ModelQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d2ModelQuery(body?: D2ModelQueryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.d2ModelQuery(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新截面
         * @summary 更新截面
         * @param {D2ModelUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d2ModelUpdate(body?: D2ModelUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.d2ModelUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 批量添加3D模型
         * @summary 批量添加3D模型
         * @param {D3ModelCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d3ModelCreate(body?: D3ModelCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.d3ModelCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除3D模型
         * @summary 删除3D模型
         * @param {D3ModelDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d3ModelDelete(body?: D3ModelDeleteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.d3ModelDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询3D模型
         * @summary 查询3D模型
         * @param {D3ModelQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d3ModelQuery(body?: D3ModelQueryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.d3ModelQuery(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新3D模型
         * @summary 更新3D模型
         * @param {D3ModelUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d3ModelUpdate(body?: D3ModelUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.d3ModelUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 批量添加材质
         * @summary 批量添加材质
         * @param {MaterialCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialCreate(body?: MaterialCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.materialCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除材质
         * @summary 删除材质
         * @param {MaterialDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialDelete(body?: MaterialDeleteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.materialDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据名称列表查询材质
         * @summary 根据名称列表查询材质
         * @param {MaterialListByNameRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialListByName(body?: MaterialListByNameRequest, options?: any): AxiosPromise<void> {
            return localVarFp.materialListByName(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询材质
         * @summary 查询材质
         * @param {MaterialQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialQuery(body?: MaterialQueryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.materialQuery(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新材质
         * @summary 更新材质
         * @param {MaterialUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialUpdate(body?: MaterialUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.materialUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 新建会员卡
         * @summary 新建会员卡
         * @param {MemberCardCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberCardCreate(body?: MemberCardCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.memberCardCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除会员卡
         * @summary 删除会员卡
         * @param {MemberCardDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberCardDelete(body?: MemberCardDeleteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.memberCardDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询会员卡信息
         * @summary 查询会员卡信息
         * @param {MemberCardQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberCardQuery(body?: MemberCardQueryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.memberCardQuery(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新会员卡
         * @summary 更新会员卡
         * @param {MemberCardUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberCardUpdate(body?: MemberCardUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.memberCardUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新会员卡销售状态
         * @summary 更新会员卡销售状态
         * @param {MemberCardUpdateSalesStatusRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberCardUpdateSalesStatus(body?: MemberCardUpdateSalesStatusRequest, options?: any): AxiosPromise<void> {
            return localVarFp.memberCardUpdateSalesStatus(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 会员查询
         * @summary 会员查询
         * @param {MemberQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberQuery(body?: MemberQueryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.memberQuery(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 新建模块
         * @summary 新建模块
         * @param {ModuleCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleCreate(body?: ModuleCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.moduleCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除模块
         * @summary 删除模块
         * @param {ModuleDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleDelete(body?: ModuleDeleteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.moduleDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询模块
         * @summary 查询模块
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleQuery(body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.moduleQuery(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新模块的标签
         * @summary 更新模块的标签
         * @param {ModuleTagsUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleTagsUpdate(body?: ModuleTagsUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.moduleTagsUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新模块
         * @summary 更新模块
         * @param {ModuleUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleUpdate(body?: ModuleUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.moduleUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 新建订单
         * @summary 新建订单
         * @param {OrderCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCreate(body?: OrderCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.orderCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除订单
         * @summary 删除订单
         * @param {OrderDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderDelete(body?: OrderDeleteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.orderDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 订单列表
         * @summary 订单列表
         * @param {OrderListRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderList(body?: OrderListRequest, options?: any): AxiosPromise<void> {
            return localVarFp.orderList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询单个订单. `用于支付后查询订单状态`
         * @summary 查询单个订单. `用于支付后查询订单状态`
         * @param {OrderQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderQuery(body?: OrderQueryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.orderQuery(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新订单, `当前仅支持管理员添加备注`
         * @summary 更新订单, `当前仅支持管理员添加备注`
         * @param {OrderUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderUpdate(body?: OrderUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.orderUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 方案查询
         * @summary 方案查询
         * @param {ProjectQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectQuery(body?: ProjectQueryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.projectQuery(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 新增产品材质报价
         * @summary 新增产品材质报价
         * @param {QuoteMaterialCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteMaterialCreate(body?: QuoteMaterialCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.quoteMaterialCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除产品材质报价
         * @summary 删除产品材质报价
         * @param {QuoteMaterialDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteMaterialDelete(body?: QuoteMaterialDeleteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.quoteMaterialDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 修改产品材质报价
         * @summary 修改产品材质报价
         * @param {QuoteMaterialUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteMaterialUpdate(body?: QuoteMaterialUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.quoteMaterialUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 新增产品型号
         * @summary 新增产品型号
         * @param {QuoteModelCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteModelCreate(body?: QuoteModelCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.quoteModelCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除产品型号
         * @summary 删除产品型号
         * @param {QuoteModelDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteModelDelete(body?: QuoteModelDeleteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.quoteModelDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 修改产品型号
         * @summary 修改产品型号
         * @param {QuoteModelUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteModelUpdate(body?: QuoteModelUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.quoteModelUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 报价查询
         * @summary 报价查询
         * @param {QuoteQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteQuery(body?: QuoteQueryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.quoteQuery(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 新增产品规格
         * @summary 新增产品规格
         * @param {QuoteSpecCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteSpecCreate(body?: QuoteSpecCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.quoteSpecCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除产品规格
         * @summary 删除产品规格
         * @param {QuoteSpecDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteSpecDelete(body?: QuoteSpecDeleteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.quoteSpecDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 修改产品规格
         * @summary 修改产品规格
         * @param {QuoteSpecUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteSpecUpdate(body?: QuoteSpecUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.quoteSpecUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 新建楼梯
         * @summary 新建楼梯
         * @param {StairCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stairCreate(body?: StairCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.stairCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除楼梯
         * @summary 删除楼梯
         * @param {StairDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stairDelete(body?: StairDeleteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.stairDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 楼梯详情
         * @summary 楼梯详情
         * @param {StairDetailRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stairDetail(body?: StairDetailRequest, options?: any): AxiosPromise<void> {
            return localVarFp.stairDetail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询楼梯
         * @summary 查询楼梯
         * @param {StairQueryRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stairQuery(body?: StairQueryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.stairQuery(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新楼梯
         * @summary 更新楼梯
         * @param {StairUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stairUpdate(body?: StairUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.stairUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 新建标签
         * @summary 新建标签
         * @param {TagCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagCreate(body?: TagCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.tagCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除标签
         * @summary 删除标签
         * @param {TagDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagDelete(body?: TagDeleteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.tagDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 标签项-添加
         * @summary 标签项-添加
         * @param {TagItemCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagItemCreate(body?: TagItemCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.tagItemCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 标签项-删除
         * @summary 标签项-删除
         * @param {TagItemDeleteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagItemDelete(body?: TagItemDeleteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.tagItemDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ! `使用了 PostgreSQL 专有的语法, 不支持测试环境` tag_id: 标签ID sorted: 排好序的标签项ID数组, 如 [1326156906414215168, 1326179034668732416, 1326178972534312960]
         * @summary 标签项-拖拽排序
         * @param {TagItemDragSortRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagItemDragSort(body?: TagItemDragSortRequest, options?: any): AxiosPromise<void> {
            return localVarFp.tagItemDragSort(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 标签项-编辑
         * @summary 标签项-编辑
         * @param {TagItemUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagItemUpdate(body?: TagItemUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.tagItemUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询标签
         * @summary 查询标签
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagQuery(body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.tagQuery(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新标签
         * @summary 更新标签
         * @param {TagUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagUpdate(body?: TagUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.tagUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 跳转到设计工具自动登录需要的信息
         * @summary 跳转到设计工具自动登录需要的信息
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDesignToken(body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.userDesignToken(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 登录
         * @summary 登录
         * @param {Login} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin(body?: Login, options?: any): AxiosPromise<void> {
            return localVarFp.userLogin(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 退出登录
         * @summary 退出登录
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout(body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.userLogout(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 刷新Token
         * @summary 刷新Token
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRefreshToken(body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.userRefreshToken(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 注册
         * @summary 注册
         * @param {UserRegisterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegister(body?: UserRegisterRequest, options?: any): AxiosPromise<void> {
            return localVarFp.userRegister(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 重置密码
         * @summary 重置密码
         * @param {UserResetPasswordRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userResetPassword(body?: UserResetPasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.userResetPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码
         * @summary 发送验证码
         * @param {UserSendCaptchaRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSendCaptcha(body?: UserSendCaptchaRequest, options?: any): AxiosPromise<void> {
            return localVarFp.userSendCaptcha(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新用户信息
         * @summary 更新用户信息
         * @param {UserUpdateProfileRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdateProfile(body?: UserUpdateProfileRequest, options?: any): AxiosPromise<void> {
            return localVarFp.userUpdateProfile(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 经销商的上传路径为 `/user/${uid}/_*` 管理员的上传路径为 `/static/_*` 和 `/user/${uid}/_*`
         * @summary 获取用于前端直传获取服务端签名或临时密钥
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUploadCredential(body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.userUploadCredential(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 批量添加截面
     * @summary 批量添加截面
     * @param {D2ModelCreateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public d2ModelCreate(body?: D2ModelCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).d2ModelCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除截面
     * @summary 删除截面
     * @param {D2ModelDeleteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public d2ModelDelete(body?: D2ModelDeleteRequest, options?: any) {
        return DefaultApiFp(this.configuration).d2ModelDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询截面
     * @summary 查询截面
     * @param {D2ModelQueryRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public d2ModelQuery(body?: D2ModelQueryRequest, options?: any) {
        return DefaultApiFp(this.configuration).d2ModelQuery(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新截面
     * @summary 更新截面
     * @param {D2ModelUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public d2ModelUpdate(body?: D2ModelUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).d2ModelUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 批量添加3D模型
     * @summary 批量添加3D模型
     * @param {D3ModelCreateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public d3ModelCreate(body?: D3ModelCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).d3ModelCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除3D模型
     * @summary 删除3D模型
     * @param {D3ModelDeleteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public d3ModelDelete(body?: D3ModelDeleteRequest, options?: any) {
        return DefaultApiFp(this.configuration).d3ModelDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询3D模型
     * @summary 查询3D模型
     * @param {D3ModelQueryRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public d3ModelQuery(body?: D3ModelQueryRequest, options?: any) {
        return DefaultApiFp(this.configuration).d3ModelQuery(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新3D模型
     * @summary 更新3D模型
     * @param {D3ModelUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public d3ModelUpdate(body?: D3ModelUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).d3ModelUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 批量添加材质
     * @summary 批量添加材质
     * @param {MaterialCreateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public materialCreate(body?: MaterialCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).materialCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除材质
     * @summary 删除材质
     * @param {MaterialDeleteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public materialDelete(body?: MaterialDeleteRequest, options?: any) {
        return DefaultApiFp(this.configuration).materialDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据名称列表查询材质
     * @summary 根据名称列表查询材质
     * @param {MaterialListByNameRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public materialListByName(body?: MaterialListByNameRequest, options?: any) {
        return DefaultApiFp(this.configuration).materialListByName(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询材质
     * @summary 查询材质
     * @param {MaterialQueryRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public materialQuery(body?: MaterialQueryRequest, options?: any) {
        return DefaultApiFp(this.configuration).materialQuery(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新材质
     * @summary 更新材质
     * @param {MaterialUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public materialUpdate(body?: MaterialUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).materialUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新建会员卡
     * @summary 新建会员卡
     * @param {MemberCardCreateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public memberCardCreate(body?: MemberCardCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).memberCardCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除会员卡
     * @summary 删除会员卡
     * @param {MemberCardDeleteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public memberCardDelete(body?: MemberCardDeleteRequest, options?: any) {
        return DefaultApiFp(this.configuration).memberCardDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询会员卡信息
     * @summary 查询会员卡信息
     * @param {MemberCardQueryRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public memberCardQuery(body?: MemberCardQueryRequest, options?: any) {
        return DefaultApiFp(this.configuration).memberCardQuery(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新会员卡
     * @summary 更新会员卡
     * @param {MemberCardUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public memberCardUpdate(body?: MemberCardUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).memberCardUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新会员卡销售状态
     * @summary 更新会员卡销售状态
     * @param {MemberCardUpdateSalesStatusRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public memberCardUpdateSalesStatus(body?: MemberCardUpdateSalesStatusRequest, options?: any) {
        return DefaultApiFp(this.configuration).memberCardUpdateSalesStatus(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 会员查询
     * @summary 会员查询
     * @param {MemberQueryRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public memberQuery(body?: MemberQueryRequest, options?: any) {
        return DefaultApiFp(this.configuration).memberQuery(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新建模块
     * @summary 新建模块
     * @param {ModuleCreateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public moduleCreate(body?: ModuleCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).moduleCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除模块
     * @summary 删除模块
     * @param {ModuleDeleteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public moduleDelete(body?: ModuleDeleteRequest, options?: any) {
        return DefaultApiFp(this.configuration).moduleDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询模块
     * @summary 查询模块
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public moduleQuery(body?: object, options?: any) {
        return DefaultApiFp(this.configuration).moduleQuery(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新模块的标签
     * @summary 更新模块的标签
     * @param {ModuleTagsUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public moduleTagsUpdate(body?: ModuleTagsUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).moduleTagsUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新模块
     * @summary 更新模块
     * @param {ModuleUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public moduleUpdate(body?: ModuleUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).moduleUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新建订单
     * @summary 新建订单
     * @param {OrderCreateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public orderCreate(body?: OrderCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).orderCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除订单
     * @summary 删除订单
     * @param {OrderDeleteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public orderDelete(body?: OrderDeleteRequest, options?: any) {
        return DefaultApiFp(this.configuration).orderDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 订单列表
     * @summary 订单列表
     * @param {OrderListRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public orderList(body?: OrderListRequest, options?: any) {
        return DefaultApiFp(this.configuration).orderList(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询单个订单. `用于支付后查询订单状态`
     * @summary 查询单个订单. `用于支付后查询订单状态`
     * @param {OrderQueryRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public orderQuery(body?: OrderQueryRequest, options?: any) {
        return DefaultApiFp(this.configuration).orderQuery(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新订单, `当前仅支持管理员添加备注`
     * @summary 更新订单, `当前仅支持管理员添加备注`
     * @param {OrderUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public orderUpdate(body?: OrderUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).orderUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 方案查询
     * @summary 方案查询
     * @param {ProjectQueryRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public projectQuery(body?: ProjectQueryRequest, options?: any) {
        return DefaultApiFp(this.configuration).projectQuery(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新增产品材质报价
     * @summary 新增产品材质报价
     * @param {QuoteMaterialCreateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public quoteMaterialCreate(body?: QuoteMaterialCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).quoteMaterialCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除产品材质报价
     * @summary 删除产品材质报价
     * @param {QuoteMaterialDeleteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public quoteMaterialDelete(body?: QuoteMaterialDeleteRequest, options?: any) {
        return DefaultApiFp(this.configuration).quoteMaterialDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 修改产品材质报价
     * @summary 修改产品材质报价
     * @param {QuoteMaterialUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public quoteMaterialUpdate(body?: QuoteMaterialUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).quoteMaterialUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新增产品型号
     * @summary 新增产品型号
     * @param {QuoteModelCreateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public quoteModelCreate(body?: QuoteModelCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).quoteModelCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除产品型号
     * @summary 删除产品型号
     * @param {QuoteModelDeleteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public quoteModelDelete(body?: QuoteModelDeleteRequest, options?: any) {
        return DefaultApiFp(this.configuration).quoteModelDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 修改产品型号
     * @summary 修改产品型号
     * @param {QuoteModelUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public quoteModelUpdate(body?: QuoteModelUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).quoteModelUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 报价查询
     * @summary 报价查询
     * @param {QuoteQueryRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public quoteQuery(body?: QuoteQueryRequest, options?: any) {
        return DefaultApiFp(this.configuration).quoteQuery(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新增产品规格
     * @summary 新增产品规格
     * @param {QuoteSpecCreateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public quoteSpecCreate(body?: QuoteSpecCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).quoteSpecCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除产品规格
     * @summary 删除产品规格
     * @param {QuoteSpecDeleteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public quoteSpecDelete(body?: QuoteSpecDeleteRequest, options?: any) {
        return DefaultApiFp(this.configuration).quoteSpecDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 修改产品规格
     * @summary 修改产品规格
     * @param {QuoteSpecUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public quoteSpecUpdate(body?: QuoteSpecUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).quoteSpecUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新建楼梯
     * @summary 新建楼梯
     * @param {StairCreateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public stairCreate(body?: StairCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).stairCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除楼梯
     * @summary 删除楼梯
     * @param {StairDeleteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public stairDelete(body?: StairDeleteRequest, options?: any) {
        return DefaultApiFp(this.configuration).stairDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 楼梯详情
     * @summary 楼梯详情
     * @param {StairDetailRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public stairDetail(body?: StairDetailRequest, options?: any) {
        return DefaultApiFp(this.configuration).stairDetail(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询楼梯
     * @summary 查询楼梯
     * @param {StairQueryRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public stairQuery(body?: StairQueryRequest, options?: any) {
        return DefaultApiFp(this.configuration).stairQuery(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新楼梯
     * @summary 更新楼梯
     * @param {StairUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public stairUpdate(body?: StairUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).stairUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新建标签
     * @summary 新建标签
     * @param {TagCreateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagCreate(body?: TagCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).tagCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除标签
     * @summary 删除标签
     * @param {TagDeleteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagDelete(body?: TagDeleteRequest, options?: any) {
        return DefaultApiFp(this.configuration).tagDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 标签项-添加
     * @summary 标签项-添加
     * @param {TagItemCreateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagItemCreate(body?: TagItemCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).tagItemCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 标签项-删除
     * @summary 标签项-删除
     * @param {TagItemDeleteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagItemDelete(body?: TagItemDeleteRequest, options?: any) {
        return DefaultApiFp(this.configuration).tagItemDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ! `使用了 PostgreSQL 专有的语法, 不支持测试环境` tag_id: 标签ID sorted: 排好序的标签项ID数组, 如 [1326156906414215168, 1326179034668732416, 1326178972534312960]
     * @summary 标签项-拖拽排序
     * @param {TagItemDragSortRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagItemDragSort(body?: TagItemDragSortRequest, options?: any) {
        return DefaultApiFp(this.configuration).tagItemDragSort(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 标签项-编辑
     * @summary 标签项-编辑
     * @param {TagItemUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagItemUpdate(body?: TagItemUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).tagItemUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询标签
     * @summary 查询标签
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagQuery(body?: object, options?: any) {
        return DefaultApiFp(this.configuration).tagQuery(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新标签
     * @summary 更新标签
     * @param {TagUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagUpdate(body?: TagUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).tagUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 跳转到设计工具自动登录需要的信息
     * @summary 跳转到设计工具自动登录需要的信息
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userDesignToken(body?: object, options?: any) {
        return DefaultApiFp(this.configuration).userDesignToken(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 登录
     * @summary 登录
     * @param {Login} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userLogin(body?: Login, options?: any) {
        return DefaultApiFp(this.configuration).userLogin(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 退出登录
     * @summary 退出登录
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userLogout(body?: object, options?: any) {
        return DefaultApiFp(this.configuration).userLogout(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 刷新Token
     * @summary 刷新Token
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userRefreshToken(body?: object, options?: any) {
        return DefaultApiFp(this.configuration).userRefreshToken(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 注册
     * @summary 注册
     * @param {UserRegisterRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userRegister(body?: UserRegisterRequest, options?: any) {
        return DefaultApiFp(this.configuration).userRegister(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 重置密码
     * @summary 重置密码
     * @param {UserResetPasswordRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userResetPassword(body?: UserResetPasswordRequest, options?: any) {
        return DefaultApiFp(this.configuration).userResetPassword(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 发送验证码
     * @summary 发送验证码
     * @param {UserSendCaptchaRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userSendCaptcha(body?: UserSendCaptchaRequest, options?: any) {
        return DefaultApiFp(this.configuration).userSendCaptcha(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新用户信息
     * @summary 更新用户信息
     * @param {UserUpdateProfileRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userUpdateProfile(body?: UserUpdateProfileRequest, options?: any) {
        return DefaultApiFp(this.configuration).userUpdateProfile(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 经销商的上传路径为 `/user/${uid}/_*` 管理员的上传路径为 `/static/_*` 和 `/user/${uid}/_*`
     * @summary 获取用于前端直传获取服务端签名或临时密钥
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userUploadCredential(body?: object, options?: any) {
        return DefaultApiFp(this.configuration).userUploadCredential(body, options).then((request) => request(this.axios, this.basePath));
    }
}


